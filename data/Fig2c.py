import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from matplotlib import gridspec
import scipy.constants as si

# Fig 2c
# color0 = 240 (blue)
# color1 = 360 (red)
# imax = 80e-9

# Fig 3b
# color0 = 240 + 3/10*(360-240) = 276
# color1 = 276
# imax = 7e-9
# Vmin = 50
# Vmax = 160

# Fig 3d
# color0 = 240 (blue)
# color1 = 360 (red)
# imax = 32e-9
# Vmin = 50
# Vmax = 160

def MakePlot(filename,color0,colorpi,imax,Vmin=None,Vmax=None,save=False):
	'''
	Makes a 2D map with a different color for each flux value
	The file containing the data should be saved via "Save General Text" in Igor.
	Terminator: CRLF
	Column Delimiter: Comma
	Decimal Symbol: Dot
	Write: Row positions and Column positions
	The map flux axis should be in unit of Phi0 (between 0 and Phi0 for best visual)

	:param filename: name of the .txt generated by Igor
	:type filename: String
	:param color0: color angle for 0 flux (240 is blue, 360 is red)
	:type color0: float
	:param colorpi: color angle for pi flux (240 is blue, 360 is red)
	:type colorpi: float
	:param imax: value of the current for which saturation is reached
	:type imax: float
	:param Vmin: min voltage for y axis
	:type Vmin: float (in microVolt)
	:param Vmax: max voltage for y axis
	:type Vmax: float (in microVolt)
	'''
	with open(filename,"rb") as f: 
		lines = f.readlines()

	nlines = len(lines)-1
	npts = len(str(lines[0]).split(","))-1
	data = np.zeros((nlines,npts))

	nanline = np.zeros(npts)
	for i,x in enumerate(nanline):
		nanline[i] = np.nan 

	def convert(line):
		linestr = str(line).split(",")
		lineout = np.zeros(len(linestr))
		for i,val in enumerate(linestr):
			if "NAN" in val:
				lineout[i] = np.nan
			elif val == "b'":
				lineout[i] = 0
			else:
				val = val.replace("b'","")
				val = val.replace("'","")
				val = val.replace("\\r","")
				val = val.replace("\\n","")
				lineout[i] = float(val)
		return lineout

	def color(dataxaxis,i,c1,c2):
		ind = np.abs(0.5-np.abs(0.5-dataxaxis[i]))
		return (c1*(0.5-ind)/0.5 + c2*ind/0.5)

	def findcolor(val,minv,maxv):
		if val<=minv:
			return 0
		elif val>=maxv:
			return 1
		else:
			return (val-minv)/(maxv-minv)

	datayaxis = convert(lines[0])[1:]*1e6
	dataxaxis = np.zeros(nlines)

	for i,line in enumerate(lines):
		if i>0:
			lin = convert(line)
			dataxaxis[i-1] = lin[0]
			data[i-1] = lin[1:]

	if Vmin is not None:
		indmin = np.where(datayaxis>=Vmin)[0][0]
	else:
		indmin = 0
	if Vmax is not None:
		indmax = np.where(datayaxis>=Vmax)[0][0]
	else:
		indmax = 0
	datayaxis = datayaxis[indmin:indmax]
	npts = len(datayaxis)

	toplot = np.zeros((npts,nlines,4))

	for i,xvalue in enumerate(dataxaxis): 
		h = color(dataxaxis,i,color0/360,colorpi/360) 
		for j,row in enumerate(data[i][indmin:indmax]):
			if np.isnan(row):
				toplot[j][i] = [0.5,0.5,0.5,1]
			else:
				toplot[j][i] = np.append(colors.hsv_to_rgb([h,findcolor(row,0,imax),1]),1)
	nptscbar = 201
	xcbar = np.linspace(color0/360,colorpi/360,nptscbar)
	ycbar = np.linspace(0,1,nptscbar)
	cbardat = np.zeros((nptscbar,nptscbar,4))
	for i,x in enumerate(xcbar):
		for j,y in enumerate(ycbar):
			cbardat[j][i] = np.append(colors.hsv_to_rgb([x,y,1]),1)


	fig = plt.figure(figsize=(10,7))
	gs = gridspec.GridSpec(1,2,width_ratios=[4,1])
	ax0 = plt.subplot(gs[0])
	ax1 = plt.subplot(gs[1])

	ax0.imshow(toplot[::-1,:,:],extent=[dataxaxis[0],dataxaxis[-1],datayaxis[0],datayaxis[-1]])
	ax0.set_aspect((dataxaxis[-1]-dataxaxis[0])/(datayaxis[-1]-datayaxis[0]))
	#ax0.plot([0,0],[datayaxis[0],datayaxis[-1]],color=colors.hsv_to_rgb([color0/360,1,1]),linestyle='--')
	#ax0.plot([0.5,0.5],[datayaxis[0],datayaxis[-1]],color=colors.hsv_to_rgb([colorpi/360,1,1]),linestyle='--')
	ax0.set_xticks(np.linspace(0,1,5))
	ax0.set_xticklabels([0,0.25,0.5,0.75,1])
	ax0.set_xlabel("Flux in the SQUID ($\Phi_0$)")
	ax0.set_ylabel("Voltage ($\mu$V)")
	freqax = ax0.secondary_yaxis('right',functions=(Vtof,ftoV))
	freqax.set_ylabel('Frequency (GHz)',rotation=270,labelpad=15)
	ax1.imshow(cbardat[::-1,:,:],extent=[0,0.5,0,imax*1e9])
	ax1.set_aspect(0.5/(imax*1e9)*3)
	ax1.set_xticks(np.linspace(0,0.5,3))
	ax1.set_xticklabels([0,0.25,0.5])
	ax1.set_xlabel("Flux in the SQUID ($\Phi_0$)")
	ax1.set_ylabel("Current (nA)")

	plt.tight_layout()
	if not(save):
		plt.show()
	else:
		savename = filename.split('.')[0] + '.png'
		fig.savefig(savename,dpi=300)

def Vtof(V):
	return V*1e-6*2*si.e/si.h*1e-9

def ftoV(f):
	return f*1e9*si.h/(2*si.e)*1e6